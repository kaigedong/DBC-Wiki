import{e as n}from"./app.554cb4e4.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},e=n(`<h1 id="dbc-computing-node-deployment" tabindex="-1"><a class="header-anchor" href="#dbc-computing-node-deployment" aria-hidden="true">#</a> DBC computing node deployment</h1><h2 id="pre-installation-preparation-based-on-the-configured-fixed-public-network-ip-address-deploy-the-kvm-installation-environment" tabindex="-1"><a class="header-anchor" href="#pre-installation-preparation-based-on-the-configured-fixed-public-network-ip-address-deploy-the-kvm-installation-environment" aria-hidden="true">#</a> Pre-installation preparation (based on the configured fixed public network ip address), deploy the KVM installation environment</h2><h3 id="note-please-uninstall-the-installed-graphics-driver-before-starting-this-operation-cannot-have-graphics-driver" tabindex="-1"><a class="header-anchor" href="#note-please-uninstall-the-installed-graphics-driver-before-starting-this-operation-cannot-have-graphics-driver" aria-hidden="true">#</a> Note: Please uninstall the installed graphics driver before starting, this operation cannot have graphics driver</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade -y
<span class="token function">sudo</span> <span class="token function">apt-get</span>  <span class="token function">install</span> qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf cpu-checker <span class="token function">vim</span> -y
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="create-and-mount-the-xfs-file-system" tabindex="-1"><a class="header-anchor" href="#create-and-mount-the-xfs-file-system" aria-hidden="true">#</a> create and mount the XFS file system</h2><h3 id="_1-check-the-hard-disk-partition" tabindex="-1"><a class="header-anchor" href="#_1-check-the-hard-disk-partition" aria-hidden="true">#</a> 1. Check the hard disk partition</h3><p><code>lsblk</code></p><h3 id="_2-create-a-data-disk-folder-format-the-hard-disk-and-mount-the-hard-disk-the-data-disk-mounting-directory-must-be-data" tabindex="-1"><a class="header-anchor" href="#_2-create-a-data-disk-folder-format-the-hard-disk-and-mount-the-hard-disk-the-data-disk-mounting-directory-must-be-data" aria-hidden="true">#</a> 2. Create a data disk folder, format the hard disk, and mount the hard disk (the data disk mounting directory must be /data)</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /data
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfsprogs -y
<span class="token function">sudo</span> mkfs.xfs -n <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span> -f /dev/sdb  \uFF08Whether it is sdb here depends on the situation of lsblk\uFF09
<span class="token function">sudo</span> <span class="token function">mount</span>  -o pquota /dev/sdb /data
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /data
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;/dev/sdb /data     xfs pquota 0 1&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/fstab
<span class="token function">sudo</span> <span class="token function">mount</span> -a
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="determine-whether-the-machine-supports-virtualization" tabindex="-1"><a class="header-anchor" href="#determine-whether-the-machine-supports-virtualization" aria-hidden="true">#</a> Determine whether the machine supports virtualization</h2><h3 id="_1-turn-on-hardware-support" tabindex="-1"><a class="header-anchor" href="#_1-turn-on-hardware-support" aria-hidden="true">#</a> 1. Turn on hardware support</h3><blockquote><p>BIOS open VT-d (search according to the motherboard type browser) VT (VT-x) and VT-d support, you need to set related support to enable, which is enabled by default</p><p>Path under normal circumstances: Processor\u2014IIO Configuration\u2014Intel@ VT for Directed I/O(VT-d)</p></blockquote><h3 id="_2-environment-dependence-check-whether-the-cpu-supports-virtualization-and-whether-kvm-is-available" tabindex="-1"><a class="header-anchor" href="#_2-environment-dependence-check-whether-the-cpu-supports-virtualization-and-whether-kvm-is-available" aria-hidden="true">#</a> 2. Environment dependence, check whether the CPU supports virtualization and whether KVM is available</h3><p><code>egrep -c &#39;(svm|vm)&#39; /proc/cpuinfo</code></p><blockquote><p>CPU detection, if it is displayed as 0, virtualization is not supported</p></blockquote><p><code>kvm-ok</code></p><blockquote><p>Check if kvm is available</p><p>display INFO: /dev/kvm exists<br> KVM acceleration can be used Indicates that subsequent operations can be performed. If the display does not match it, please check whether VT-d is turned on correctly</p></blockquote><h2 id="if-you-are-a-ubuntu20-04-system-please-do-the-following" tabindex="-1"><a class="header-anchor" href="#if-you-are-a-ubuntu20-04-system-please-do-the-following" aria-hidden="true">#</a> If you are a ubuntu20.04 system, please do the following</h2><ul><li>Set up a blacklist to prevent the card from being occupied</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modprobe.d/blacklist.conf
<span class="token comment">#Finally add content:</span>
blacklist snd_hda_intel
blacklist amd76x_edac
blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>Set up graphics pass-through</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Query graphics card ID</span>
lspci -nnv <span class="token operator">|</span> <span class="token function">grep</span> NVIDIA
Copy the ID of the graphics card, such as 10de:2231 10de:1aef, and keep the duplicate content only once

<span class="token comment">#Modify the core file</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/grub
<span class="token comment">#Add in GRUB_CMDLINE_LINUX_DEFAULT field (if it is AMD platform, intel_iommu=on is changed to amd_iommu=on)</span>
quiet splash <span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on kvm.ignore_msrs<span class="token operator">=</span><span class="token number">1</span> vfio-pci.ids<span class="token operator">=</span><span class="token operator">&lt;</span>graphics card id, separated by commas<span class="token operator">&gt;</span>

<span class="token comment">#Update kernel</span>
<span class="token function">sudo</span> <span class="token function">update-grub</span>

<span class="token comment">#Restart the machine</span>
<span class="token comment">#Query graphics card occupancy</span>
lspci -vv -s <span class="token operator">&lt;</span>graphics card PCI interface<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> driver
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>If vfio-pci is displayed, it is normal. For non-vfio-pci, please go back and check whether the grub file is written correctly or <em><strong>Follow step 6 and 2 for manual binding</strong></em><em><strong>This is the end of the 20.04LTS system graphics isolation step, please go to step 7 to continue the operation</strong></em></p></blockquote><h2 id="if-you-are-a-ubuntu18-04-system-please-continue-to-operate" tabindex="-1"><a class="header-anchor" href="#if-you-are-a-ubuntu18-04-system-please-continue-to-operate" aria-hidden="true">#</a> If you are a ubuntu18.04 system, please continue to operate</h2><h2 id="enable-system-grouping" tabindex="-1"><a class="header-anchor" href="#enable-system-grouping" aria-hidden="true">#</a> enable system grouping</h2><h3 id="_1-configure-intel-iommu" tabindex="-1"><a class="header-anchor" href="#_1-configure-intel-iommu" aria-hidden="true">#</a> 1. Configure intel_iommu</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/grub

<span class="token comment">#Add in the GRUB_CMDLINE_LINUX_DEFAULT field</span>
<span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on <span class="token assign-left variable">iommu</span><span class="token operator">=</span>pt rd.driver.pre<span class="token operator">=</span>vfio-pci
<span class="token comment">#Add in GRUB_CMDLINE_LINUX field</span>
<span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on <span class="token assign-left variable">iommu</span><span class="token operator">=</span>pt rd.driver.pre<span class="token operator">=</span>vfio-pci
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-configure-the-module-file" tabindex="-1"><a class="header-anchor" href="#_2-configure-the-module-file" aria-hidden="true">#</a> 2. Configure the module file</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span>  /etc/modules
<span class="token comment">#Add the following content:</span>
pci_stub
vfio
vfio_iommu_type1
vfio_pci
kvm
kvm_intel

<span class="token comment">#Update grub.cfg file</span>
<span class="token function">sudo</span> <span class="token function">update-grub</span>

<span class="token comment">#Restart the machine, check whether iommu is correctly enabled (or restart and check after subsequent operations)</span>
<span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> -i iommu

<span class="token comment">#Display is similar to [3.887539] pci 0000:83:00.1: Adding to iommu group 46 means successful activation</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="isolate-gpu-resources" tabindex="-1"><a class="header-anchor" href="#isolate-gpu-resources" aria-hidden="true">#</a> isolate GPU resources</h2><h3 id="_1-set-up-a-blacklist-to-prevent-the-card-from-being-occupied" tabindex="-1"><a class="header-anchor" href="#_1-set-up-a-blacklist-to-prevent-the-card-from-being-occupied" aria-hidden="true">#</a> 1. Set up a blacklist to prevent the card from being occupied</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modprobe.d/blacklist.conf  
<span class="token comment">#Finally add content:</span>
blacklist snd_hda_intel
blacklist amd76x_edac
blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-collect-pci-device-information" tabindex="-1"><a class="header-anchor" href="#_2-collect-pci-device-information" aria-hidden="true">#</a> 2. Collect PCI device information</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lspci -nnv <span class="token operator">|</span> <span class="token function">grep</span> NVIDIA
<span class="token comment">#Display similar to</span>
<span class="token number">17</span>:00.0 VGA compatible controller <span class="token punctuation">[</span>0300<span class="token punctuation">]</span>: NVIDIA Corporation TU104 <span class="token punctuation">[</span>GeForce RTX <span class="token number">2080</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>10de:1e82<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span> <span class="token punctuation">(</span>prog-if 00 <span class="token punctuation">[</span>VGA controller<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">17</span>:00.1 Audio device <span class="token punctuation">[</span>0403<span class="token punctuation">]</span>: NVIDIA Corporation TU104 HD Audio Controller <span class="token punctuation">[</span>10de:10f8<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span>
<span class="token number">17</span>:00.2 USB controller <span class="token punctuation">[</span>0c03<span class="token punctuation">]</span>: NVIDIA Corporation TU104 USB <span class="token number">3.1</span> Host Controller <span class="token punctuation">[</span>10de:1ad8<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span> <span class="token punctuation">(</span>prog-if <span class="token number">30</span> <span class="token punctuation">[</span>XHCI<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">17</span>:00.3 Serial bus controller <span class="token punctuation">[</span>0c80<span class="token punctuation">]</span>: NVIDIA Corporation TU104 USB Type-C UCSI Controller <span class="token punctuation">[</span>10de:1ad9<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span>
<span class="token number">65</span>:00.0 VGA compatible controller <span class="token punctuation">[</span>0300<span class="token punctuation">]</span>: NVIDIA Corporation TU104 <span class="token punctuation">[</span>GeForce RTX <span class="token number">2080</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>10de:1e82<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span> <span class="token punctuation">(</span>prog-if 00 <span class="token punctuation">[</span>VGA controller<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">65</span>:00.1 Audio device <span class="token punctuation">[</span>0403<span class="token punctuation">]</span>: NVIDIA Corporation TU104 HD Audio Controller <span class="token punctuation">[</span>10de:10f8<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span>
<span class="token number">65</span>:00.2 USB controller <span class="token punctuation">[</span>0c03<span class="token punctuation">]</span>: NVIDIA Corporation TU104 USB <span class="token number">3.1</span> Host Controller <span class="token punctuation">[</span>10de:1ad8<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span> <span class="token punctuation">(</span>prog-if <span class="token number">30</span> <span class="token punctuation">[</span>XHCI<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">65</span>:00.3 Serial bus controller <span class="token punctuation">[</span>0c80<span class="token punctuation">]</span>: NVIDIA Corporation TU104 USB Type-C UCSI Controller <span class="token punctuation">[</span>10de:1ad9<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span>
<span class="token comment">#Record all device codes and PCI id (repeated codes are only taken once)</span>
<span class="token comment">#E.g:</span>
<span class="token comment">#equipment number:</span>
10de:1e82,10de:10f8,10de:1ad8,10de:1ad9    \uFF08Repeat only once\uFF09
<span class="token comment">#PCI interface id (The PCI interface of each machine is different, please note the record)</span>
<span class="token number">17</span>:00.0
<span class="token number">17</span>:00.1
<span class="token number">17</span>:00.2
<span class="token number">17</span>:00.3
<span class="token number">65</span>:00.0
<span class="token number">65</span>:00.1
<span class="token number">65</span>:00.2
<span class="token number">65</span>:00.3
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_3-set-up-vfio-and-isolate-the-gpu-for-pass-through" tabindex="-1"><a class="header-anchor" href="#_3-set-up-vfio-and-isolate-the-gpu-for-pass-through" aria-hidden="true">#</a> 3. Set up vfio and isolate the GPU for pass-through</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modprobe.d/vfio.conf
<span class="token comment">#Write the device code information collected above (if repeated, just write it once):</span>
options vfio-pci <span class="token assign-left variable">ids</span><span class="token operator">=</span>10de:1e82,10de:10f8,10de:1ad8,10de:1ad9

<span class="token function">sudo</span> <span class="token function">vim</span> /etc/modules-load.d/vfio-pci.conf
<span class="token comment">#Write the following</span>
vfio-pci kvmgt vfio-iommu-type1 vfio-mdev

<span class="token comment">#Restart the machine</span>
<span class="token function">sudo</span> <span class="token function">reboot</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_4-check-the-gpu-status-all-interfaces-must-be-queried-to-prevent-it-from-being-occupied-by-vfio-pci" tabindex="-1"><a class="header-anchor" href="#_4-check-the-gpu-status-all-interfaces-must-be-queried-to-prevent-it-from-being-occupied-by-vfio-pci" aria-hidden="true">#</a> 4. Check the GPU status (all interfaces must be queried to prevent it from being occupied by vfio-pci)</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Please pay attention to the replacement of PCI interface content!</span>
lspci -vv -s <span class="token operator">&lt;</span>PCI interface<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> driver
<span class="token comment">#E.g:</span>
lspci -vv -s <span class="token number">17</span>:00.0 <span class="token operator">|</span> <span class="token function">grep</span> driver
lspci -vv -s <span class="token number">17</span>:00.1 <span class="token operator">|</span> <span class="token function">grep</span> driver
lspci -vv -s <span class="token number">17</span>:00.2 <span class="token operator">|</span> <span class="token function">grep</span> driver
lspci -vv -s <span class="token number">17</span>:00.3 <span class="token operator">|</span> <span class="token function">grep</span> driver

<span class="token comment">#No output means there is no driver.</span>
<span class="token comment">#If Kernel driver in use: vfio-pci is displayed, the isolation is successful</span>
<span class="token comment">#If the display is similar to Kernel driver in user: snd_hda_intel indicates that the device is occupied by other drivers</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>If there is a PCI that is not occupied by vfio-pci, please continue to execute, if it has been successfully occupied by vfio-pci, you can skip the next step</p></blockquote><h2 id="if-the-driver-query-is-kernel-driver-in-use-vfio-pci-there-is-no-need-to-operate-the-following-content-please-continue-to-execute-if-the-binding-is-not-successful" tabindex="-1"><a class="header-anchor" href="#if-the-driver-query-is-kernel-driver-in-use-vfio-pci-there-is-no-need-to-operate-the-following-content-please-continue-to-execute-if-the-binding-is-not-successful" aria-hidden="true">#</a> If the driver query is Kernel driver in use: vfio-pci, there is no need to operate the following content, please continue to execute if the binding is not successful</h2><h3 id="_1-unbind-the-device" tabindex="-1"><a class="header-anchor" href="#_1-unbind-the-device" aria-hidden="true">#</a> 1. Unbind the device</h3><blockquote><p>If the driver query shows a non-Kernel driver in user: vfio-pci, unbind the device (each group of IDs must be unbound, the following is only an example, please modify it according to your own query pci interface)</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Please pay attention to the replacement of the content, the following command is only for demonstration (need to unbind all occupied graphics card pci interfaces)</span>
<span class="token function">sudo</span> -i
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 0000:17:00.0 <span class="token operator">&gt;</span> /sys/bus/pci/devices/0000<span class="token punctuation">\\</span>:17<span class="token punctuation">\\</span>:00.0/driver/unbind
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 0000:83:00.0 <span class="token operator">&gt;</span> /sys/bus/pci/devices/0000<span class="token punctuation">\\</span>:83<span class="token punctuation">\\</span>:00.0/driver/unbind


<span class="token function">sudo</span> modprobe vfio
<span class="token function">sudo</span> modprobe vfio-pci
<span class="token function">sudo</span> <span class="token function">reboot</span>

<span class="token comment">#Restart the host and check if the GPU is isolated in a different IOMMU group and the vfio driver is being used</span>
<span class="token comment">#Execute the command to check whether the GPU is isolated in different IOMMU groups</span>
<span class="token function">find</span> /sys/kernel/iommu_groups/*/devices/*
<span class="token comment">#Display grouping is normal</span>

<span class="token comment">#Re-query PCI (pay attention to replace), if vfio-pci is still not queried or other content is displayed, please perform a next step</span>
lspci -vv -s <span class="token number">17</span>:00.0 <span class="token operator">|</span> <span class="token function">grep</span> driver
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-manually-bind-the-gpu" tabindex="-1"><a class="header-anchor" href="#_2-manually-bind-the-gpu" aria-hidden="true">#</a> 2. Manually bind the GPU</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Execute the command to bind (Note: the content after echo is the ID of the graphics card that the machine queried) The already occupied PCI does not need to be manually bound</span>
<span class="token function">sudo</span> -i
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de 1e82 <span class="token operator">&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de <span class="token number">2206</span> <span class="token operator">&gt;&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
\u2026\u2026\u2026\u2026


<span class="token comment">#Check again after binding (check all items of each card)</span>
lspci -vv -s <span class="token number">17</span>:00.0 <span class="token operator">|</span> <span class="token function">grep</span> driver
<span class="token comment">#If Kernel driver in use: vfio-pci appears, the binding is successful. If still unsuccessful, please go back and check</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="after-confirming-that-the-graphics-card-of-the-machine-is-occupied-by-vfio-pci-start-the-libvirtd-service-and-set-the-boot-to-start-automatically" tabindex="-1"><a class="header-anchor" href="#after-confirming-that-the-graphics-card-of-the-machine-is-occupied-by-vfio-pci-start-the-libvirtd-service-and-set-the-boot-to-start-automatically" aria-hidden="true">#</a> After confirming that the graphics card of the machine is occupied by vfio-pci, start the libvirtd service and set the boot to start automatically</h2><h3 id="_1-turn-on-the-virt-tcp-monitoring-service" tabindex="-1"><a class="header-anchor" href="#_1-turn-on-the-virt-tcp-monitoring-service" aria-hidden="true">#</a> 1. Turn on the virt tcp monitoring service:</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/libvirt/libvirtd.conf
<span class="token comment">#After the arrow is the modified content: remove the # in front of these three lines, and change sasl to none</span>

<span class="token comment">#listen_tls = 0	=======&gt;	listen_tls = 0</span>
<span class="token comment">#listen_tcp = 1	=======&gt;	listen_tcp = 1</span>
<span class="token comment">#auth_tcp = &quot;sasl&quot;	======&gt;	auth_tcp = &quot;none&quot;</span>

<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/libvirtd
<span class="token comment">#Corresponding modification to the following configuration</span>
<span class="token assign-left variable">libvirtd_opts</span><span class="token operator">=</span><span class="token string">&quot;-l&quot;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-start-libvirtd-and-set-it-to-start-at-boot" tabindex="-1"><a class="header-anchor" href="#_2-start-libvirtd-and-set-it-to-start-at-boot" aria-hidden="true">#</a> 2. Start libvirtd and set it to start at boot</h3><p>sudo systemctl start libvirtd.service sudo systemctl enable libvirtd.service</p><h2 id="create-a-dbc-user" tabindex="-1"><a class="header-anchor" href="#create-a-dbc-user" aria-hidden="true">#</a> Create a dbc user</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">wget</span> http://116.85.24.172:20444/static/add_dbc_user.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x add_dbc_user.sh
<span class="token function">sudo</span> ./add_dbc_user.sh dbc
<span class="token comment">#dbcUser password is set by yourself</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="install-the-dbc-node-program" tabindex="-1"><a class="header-anchor" href="#install-the-dbc-node-program" aria-hidden="true">#</a> Install the DBC node program</h2><ul><li><strong>Note</strong>: need to switch to dbc user installation</li></ul><ol><li>download install script: install_mining.sh from: https://github.com/DeepBrainChain/DBC-AIComputingNet/releases/</li><li>add executable permissions <code>chmod +x ./install_mining.sh</code></li><li>run install_mining.sh <code>./install_mining.sh [install_dir]</code></li></ol><p>(During the installation process, you need to input two listen port)</p><h2 id="restart-dbc-program-service-status-check" tabindex="-1"><a class="header-anchor" href="#restart-dbc-program-service-status-check" aria-hidden="true">#</a> Restart DBC program &amp; service status check</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop dbc
<span class="token function">sudo</span> systemctl start dbc
<span class="token function">sudo</span> systemctl status dbc
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="download-the-mirror-template" tabindex="-1"><a class="header-anchor" href="#download-the-mirror-template" aria-hidden="true">#</a> Download the mirror template</h2><ul><li>http://183.60.141.59:5100/ubuntu-img/</li></ul><p>Download: ubuntu.qcow2 and ubuntu-2004.qcow2 these two mirrors</p><h2 id="back-up-the-machine-id-and-private-key-very-important-if-this-private-key-is-lost-50-of-the-pledged-coins-will-be-lost-please-pay-attention-to-multiple-backups" tabindex="-1"><a class="header-anchor" href="#back-up-the-machine-id-and-private-key-very-important-if-this-private-key-is-lost-50-of-the-pledged-coins-will-be-lost-please-pay-attention-to-multiple-backups" aria-hidden="true">#</a> Back up the machine id and private key (very important,if this private key is lost, 50% of the pledged coins will be lost, please pay attention to multiple backups)</h2><p>Back up the contents of the following file: <code> /home/dbc/0.3.7.3/dbc_repo/dat/node.dat</code>, put it in a safe place, and use it later If you reinstall the system or reinstall DBC later, you need to use the original id and private key, otherwise the pledged coins will be deducted</p><h2 id="viewing-personal-wallet-address" tabindex="-1"><a class="header-anchor" href="#viewing-personal-wallet-address" aria-hidden="true">#</a> Viewing personal wallet address</h2><p><code>cat /home/dbc/0.3.7.3/dbc_repo/conf/core.conf</code></p><h2 id="parameter-check-ignore-it-temporarily-it-is-being-revised-again-and-the-program-package-has-been-temporarily-removed" tabindex="-1"><a class="header-anchor" href="#parameter-check-ignore-it-temporarily-it-is-being-revised-again-and-the-program-package-has-been-temporarily-removed" aria-hidden="true">#</a> Parameter check(Ignore it temporarily, it is being revised again, and the program package has been temporarily removed)</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Check the memory, hard disk, graphics card, IP, if you do not see the content of the following picture on the website, it means that the system does not detect the memory or hard disk, you need to manually execute a check command:</span>
<span class="token function">sudo</span> <span class="token function">bash</span>   /home/dbc/0.3.7.3/dbc_repo/tool/node_info/node_info.sh

<span class="token comment"># Restart DBC:</span>
<span class="token function">sudo</span> systemctl restart dbc
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>Perform this step to check whether the parameter acquisition is normal</p><p>cat /home/dbc/0.3.7.3/dbc_repo/.dbc_node_info.conf</p><p>If the GPU part is displayed as N/A, it can be ignored. Other parts show N/A or empty, please correct it manually and restart DBC</p></blockquote><h2 id="test-to-create-a-virtual-machine-with-graphics-card-pass-through-to-check-whether-the-previous-configuration-is-correct" tabindex="-1"><a class="header-anchor" href="#test-to-create-a-virtual-machine-with-graphics-card-pass-through-to-check-whether-the-previous-configuration-is-correct" aria-hidden="true">#</a> Test to create a virtual machine with graphics card pass-through to check whether the previous configuration is correct</h2><ul><li>Test program download address: https://github.com/DeepBrainChain/DBC-AIComputingNet/releases/download/0.3.7.9/check_env</li><li>Binary file, add execute permission and execute directly: chmod 777 chec_env ; ./check_env</li><li>If the green check &#39;vm domain_test successful&#39; appears, it means success. If it does not appear, please check whether the previous configurations are correct.</li></ul><h2 id="check-whether-the-various-hardware-parameters-of-the-machine-are-normal" tabindex="-1"><a class="header-anchor" href="#check-whether-the-various-hardware-parameters-of-the-machine-are-normal" aria-hidden="true">#</a> Check whether the various hardware parameters of the machine are normal</h2><ul><li>If the previous step is successful, a virtual machine will be successfully created, and log in to the virtual machine through ssh, where: vm_local_ip is the virtual machine&#39;s intranet ip address, the user name is dbc, and pwd is the login password</li><li><img src="https://user-images.githubusercontent.com/32829693/129731433-3e01b669-f274-419e-9ea0-d7891705a12e.png" alt="image"></li><li>Then cd to the test script directory and run:\u3010pytest .\u3011\uFF0C <ul><li>cd /test/dbc_gpu_server_test/</li><li>sudo -i (Switch to root user)</li><li>pytest .</li></ul></li><li>A total of 18 tests; <ul><li>10 unit tests, testing CPU, memory, hard disk, graphics card, video memory, cuda usability, etc.;</li><li>7 integration tests to test whether the actual usage conditions are normal (such as pytorch calculation, training and inference), and eliminate potential hardware failures;</li><li>1 benchmark speed test, testing the training and inference of dozens of CNN networks, lasting about ten minutes;</li><li>If there is no red error, it will pass. If there is a red F/error, the test item corresponding to the error will be displayed, which can be checked according to the information;</li><li>The full test process of 4 cards 2080ti is about 10 minutes. If the test time is too long, such as more than half an hour, there may be a problem with the machine, and the test can be aborted in advance.</li><li>Short test summary info in the test result: If all are passed, it means the test passed, as long as one item is failed, it means the test failed and the fault needs to be checked;</li><li>After the end, the &#39;result&#39; folder is generated to export the performance report;</li></ul></li><li>Back to the host, shut down and delete the tested virtual machine: ./check_env --localip x.x.x.x (x.x.x.x is the internal network ip address of the virtual machine. If you do not operate this step, the dbc program will not be able to start the new virtual machine. Passed on-chain verification)</li><li>Run the iptable command to grant the network access permission to the vm. (If you do not perform this step, external users cannot access the VM.) <ul><li>iptables -D LIBVIRT_FWI 2 -t filter</li><li>iptables -D LIBVIRT_FWO 2 -t filter</li></ul></li></ul><h2 id="check-whether-the-machine-is-correctly-added-to-the-computing-power-network" tabindex="-1"><a class="header-anchor" href="#check-whether-the-machine-is-correctly-added-to-the-computing-power-network" aria-hidden="true">#</a> Check whether the machine is correctly added to the computing power network</h2><ul><li>Use the official client node to view</li><li>Mine pool build client node For the above two points, please see: install_update_dbc_client_en.md</li><li>After 1 minute, the machine information is requested through the client, and if the machine information can be found, the machine has been added to the network. quest machine info\uFF0Crefer to\uFF1Adbc_client_http_api</li><li>About client nodes: It is recommended that each mining pool set up 2 or more client nodes to ensure that the network can still be normal when the official nodes or other mining pools provide nodes are offline. If there are too few client nodes in the network or hang Too much drop will affect the rental situation of the machine. The client node construction can start a container to deploy on other servers without taking up too much resources.</li></ul><h2 id="machine-on-the-chain" tabindex="-1"><a class="header-anchor" href="#machine-on-the-chain" aria-hidden="true">#</a> Machine on the chain</h2><p>https://github.com/DeepBrainChain/DBC-DOC/blob/master/chain_ops/machine_online_en.md</p>`,76);function t(o,i){return e}var c=s(a,[["render",t]]);export{c as default};
